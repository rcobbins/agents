#!/bin/bash

# Default Configuration for Agent Framework
# These are framework-wide defaults that can be overridden by project-specific configs

# Framework Version
FRAMEWORK_VERSION="1.0.0"
FRAMEWORK_NAME="Agent Framework"

# Framework Paths
FRAMEWORK_DIR="${FRAMEWORK_DIR:-$HOME/agent-framework}"
FRAMEWORK_AGENTS_DIR="$FRAMEWORK_DIR/agents/templates"
FRAMEWORK_UTILS_DIR="$FRAMEWORK_DIR/utils"
FRAMEWORK_LAUNCHER_DIR="$FRAMEWORK_DIR/launcher"

# Default Agent Configuration
DEFAULT_AGENT_COUNT=5
DEFAULT_AGENTS=("coordinator" "planner" "tester" "coder" "reviewer")

# Agent Communication Settings
MESSAGE_TIMEOUT=300  # 5 minutes
MESSAGE_RETRY_COUNT=3
MESSAGE_RETRY_DELAY=5  # seconds

# Performance Settings
AGENT_CHECK_INTERVAL=2  # seconds between inbox checks
HEARTBEAT_INTERVAL=30   # seconds between heartbeats
HEALTH_CHECK_INTERVAL=60  # seconds between health checks

# Resource Limits
MAX_MEMORY_MB=512  # per agent
MAX_CPU_PERCENT=25  # per agent
MAX_MESSAGE_BACKLOG=100  # messages in inbox before warning

# Logging Configuration
LOG_LEVEL="${LOG_LEVEL:-INFO}"  # DEBUG, INFO, WARNING, ERROR
LOG_ROTATION_SIZE="10M"  # rotate logs after this size
LOG_RETENTION_DAYS=30  # keep logs for this many days

# Testing Defaults
DEFAULT_TEST_COVERAGE=80
DEFAULT_TEST_TIMEOUT=300  # 5 minutes

# AI Integration (if Claude CLI available)
CLAUDE_ENABLED="auto"  # auto, true, false
CLAUDE_MODEL="claude-3-sonnet"
CLAUDE_MAX_TOKENS=4000
CLAUDE_TEMPERATURE=0.7

# Task Management
TASK_PRIORITY_LEVELS=("critical" "high" "normal" "low")
TASK_TIMEOUT_MINUTES=60  # default task timeout
TASK_RETRY_LIMIT=3

# Status Reporting
STATUS_UPDATE_INTERVAL=60  # seconds
PROGRESS_REPORT_INTERVAL=300  # 5 minutes
SUMMARY_REPORT_INTERVAL=3600  # 1 hour

# Cleanup Settings
CLEANUP_OLD_MESSAGES_DAYS=7
CLEANUP_OLD_LOGS_DAYS=30
CLEANUP_OLD_STATUS_DAYS=7
CLEANUP_RUN_INTERVAL=86400  # daily

# Development Mode Settings
DEV_MODE="${DEV_MODE:-false}"
DEV_VERBOSE="${DEV_VERBOSE:-false}"
DEV_NO_AI="${DEV_NO_AI:-false}"  # run without AI assistance

# Error Handling
ERROR_RETRY_ENABLED=true
ERROR_RETRY_DELAY=10  # seconds
ERROR_MAX_RETRIES=3
ERROR_ESCALATION_THRESHOLD=5  # escalate after this many errors

# Feature Flags
FEATURE_AUTO_PLANNING=true  # automatically create plans for tasks
FEATURE_AUTO_TESTING=true   # automatically run tests after code changes
FEATURE_AUTO_REVIEW=true    # automatically review code changes
FEATURE_PROGRESS_TRACKING=true
FEATURE_HEALTH_MONITORING=true
FEATURE_BATCH_MESSAGING=false  # experimental

# Default Colors for Terminal Output
COLOR_COORDINATOR="\033[1;36m"  # Cyan
COLOR_PLANNER="\033[1;34m"      # Blue
COLOR_TESTER="\033[1;33m"       # Yellow
COLOR_CODER="\033[1;32m"        # Green  
COLOR_REVIEWER="\033[1;35m"     # Magenta
COLOR_ERROR="\033[0;31m"        # Red
COLOR_SUCCESS="\033[0;32m"      # Green
COLOR_WARNING="\033[1;33m"      # Yellow
COLOR_INFO="\033[0;36m"         # Cyan
COLOR_RESET="\033[0m"            # Reset

# Function to validate configuration
validate_config() {
    local errors=0
    
    # Check framework directory exists
    if [ ! -d "$FRAMEWORK_DIR" ]; then
        echo "Error: Framework directory not found: $FRAMEWORK_DIR"
        ((errors++))
    fi
    
    # Check required utilities exist
    for util in message-utils.sh status-utils.sh context-utils.sh; do
        if [ ! -f "$FRAMEWORK_UTILS_DIR/$util" ]; then
            echo "Error: Required utility not found: $util"
            ((errors++))
        fi
    done
    
    # Check agent templates exist
    for agent in "${DEFAULT_AGENTS[@]}"; do
        if [ ! -f "$FRAMEWORK_AGENTS_DIR/${agent}.sh" ]; then
            echo "Error: Agent template not found: ${agent}.sh"
            ((errors++))
        fi
    done
    
    return $errors
}

# Function to display configuration
show_config() {
    echo "Agent Framework Configuration"
    echo "============================="
    echo "Framework Version: $FRAMEWORK_VERSION"
    echo "Framework Directory: $FRAMEWORK_DIR"
    echo ""
    echo "Default Agents: ${DEFAULT_AGENTS[*]}"
    echo "Message Timeout: ${MESSAGE_TIMEOUT}s"
    echo "Check Interval: ${AGENT_CHECK_INTERVAL}s"
    echo ""
    echo "Resource Limits:"
    echo "  Max Memory: ${MAX_MEMORY_MB}MB per agent"
    echo "  Max CPU: ${MAX_CPU_PERCENT}% per agent"
    echo ""
    echo "Features Enabled:"
    echo "  Auto Planning: $FEATURE_AUTO_PLANNING"
    echo "  Auto Testing: $FEATURE_AUTO_TESTING"
    echo "  Auto Review: $FEATURE_AUTO_REVIEW"
    echo "  Health Monitoring: $FEATURE_HEALTH_MONITORING"
    echo ""
    echo "Development Mode: $DEV_MODE"
}

# Export configuration validation
export -f validate_config show_config